name: Quality Audit & Accessibility

on:
  pull_request:
    branches: [main]
  schedule:
    # 週1回実行（日曜日の深夜）
    - cron: '0 18 * * 0'  # UTC 18:00 = JST 03:00 (月曜日)
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Lighthouse監査
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install
        working-directory: ./app

      - name: Build application
        run: npm run build
        working-directory: ./app

      - name: Start application
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        working-directory: ./app

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './app/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
            lhci_reports/

  # セキュリティ監査
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install
        working-directory: ./app

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > npm-audit-results.json
        working-directory: ./app
        continue-on-error: true

      - name: Install Snyk
        run: npm install -g snyk

      - name: Run Snyk security test
        run: snyk test --json > snyk-results.json
        working-directory: ./app
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Analyze security results
        run: |
          cat > analyze_security.js << 'EOF'
          const fs = require('fs');
          
          function analyzeSecurityResults() {
            const results = {
              timestamp: new Date().toISOString(),
              npm_audit: {},
              snyk: {},
              summary: {
                critical: 0,
                high: 0,
                medium: 0,
                low: 0
              }
            };

            // npm audit結果
            try {
              if (fs.existsSync('./npm-audit-results.json')) {
                const npmAudit = JSON.parse(fs.readFileSync('./npm-audit-results.json', 'utf8'));
                results.npm_audit = {
                  vulnerabilities: npmAudit.metadata?.vulnerabilities || {},
                  dependencies: npmAudit.metadata?.dependencies || 0
                };
                
                const vuln = npmAudit.metadata?.vulnerabilities || {};
                results.summary.critical += vuln.critical || 0;
                results.summary.high += vuln.high || 0;
                results.summary.medium += vuln.moderate || 0;
                results.summary.low += vuln.low || 0;
              }
            } catch (error) {
              results.npm_audit.error = error.message;
            }

            // Snyk結果
            try {
              if (fs.existsSync('./snyk-results.json')) {
                const snykResult = JSON.parse(fs.readFileSync('./snyk-results.json', 'utf8'));
                results.snyk = {
                  vulnerabilities: snykResult.vulnerabilities?.length || 0,
                  uniqueCount: snykResult.uniqueCount || 0
                };
              }
            } catch (error) {
              results.snyk.error = error.message;
            }

            fs.writeFileSync('./security-analysis.json', JSON.stringify(results, null, 2));
            console.log(JSON.stringify(results, null, 2));
          }

          analyzeSecurityResults();
          EOF

          node analyze_security.js
        working-directory: ./app

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            app/npm-audit-results.json
            app/snyk-results.json
            app/security-analysis.json

  # アクセシビリティ監査
  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install
        working-directory: ./app

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: ./app

      - name: Build application
        run: npm run build
        working-directory: ./app

      - name: Start application
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        working-directory: ./app

      - name: Install axe-core
        run: npm install -g @axe-core/cli

      - name: Run accessibility tests
        run: |
          # axe-coreでアクセシビリティテスト
          axe http://localhost:3000 --save accessibility-results.json --format json
          
          # Pa11yでも追加テスト
          npx pa11y http://localhost:3000 --reporter json > pa11y-results.json || true

      - name: Analyze accessibility results
        run: |
          cat > analyze_accessibility.js << 'EOF'
          const fs = require('fs');
          
          function analyzeAccessibilityResults() {
            const results = {
              timestamp: new Date().toISOString(),
              axe: {},
              pa11y: {},
              summary: {
                violations: 0,
                passes: 0,
                issues: []
              }
            };

            // Axe結果
            try {
              if (fs.existsSync('./accessibility-results.json')) {
                const axeResult = JSON.parse(fs.readFileSync('./accessibility-results.json', 'utf8'));
                results.axe = {
                  violations: axeResult.violations?.length || 0,
                  passes: axeResult.passes?.length || 0,
                  incomplete: axeResult.incomplete?.length || 0
                };
                
                results.summary.violations += results.axe.violations;
                results.summary.passes += results.axe.passes;
                
                // 重要な違反を抽出
                if (axeResult.violations) {
                  axeResult.violations.forEach(violation => {
                    results.summary.issues.push({
                      source: 'axe',
                      impact: violation.impact,
                      description: violation.description,
                      help: violation.help,
                      nodes: violation.nodes?.length || 0
                    });
                  });
                }
              }
            } catch (error) {
              results.axe.error = error.message;
            }

            // Pa11y結果
            try {
              if (fs.existsSync('./pa11y-results.json')) {
                const pa11yResult = JSON.parse(fs.readFileSync('./pa11y-results.json', 'utf8'));
                results.pa11y = {
                  issues: pa11yResult.issues?.length || 0
                };
                
                if (pa11yResult.issues) {
                  pa11yResult.issues.forEach(issue => {
                    results.summary.issues.push({
                      source: 'pa11y',
                      type: issue.type,
                      code: issue.code,
                      message: issue.message,
                      context: issue.context
                    });
                  });
                }
              }
            } catch (error) {
              results.pa11y.error = error.message;
            }

            fs.writeFileSync('./accessibility-analysis.json', JSON.stringify(results, null, 2));
            console.log(JSON.stringify(results, null, 2));
          }

          analyzeAccessibilityResults();
          EOF

          node analyze_accessibility.js

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-audit-results
          path: |
            accessibility-results.json
            pa11y-results.json
            accessibility-analysis.json

  # 統合レポート生成
  generate-quality-report:
    name: Generate Quality Report
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, security-audit, accessibility-audit]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all audit results
        uses: actions/download-artifact@v4

      - name: Generate comprehensive quality report
        run: |
          cat > generate_quality_report.js << 'EOF'
          const fs = require('fs');
          
          function generateQualityReport() {
            const report = {
              timestamp: new Date().toISOString(),
              commit: process.env.GITHUB_SHA,
              branch: process.env.GITHUB_REF_NAME,
              performance: {},
              security: {},
              accessibility: {},
              summary: {
                score: 0,
                issues: [],
                recommendations: []
              }
            };

            let totalScore = 0;
            let scoringCategories = 0;

            // Lighthouse結果
            try {
              const lighthouseFiles = fs.readdirSync('./lighthouse-results').filter(f => f.endsWith('.json'));
              if (lighthouseFiles.length > 0) {
                const lighthouse = JSON.parse(fs.readFileSync(`./lighthouse-results/${lighthouseFiles[0]}`, 'utf8'));
                
                report.performance = {
                  performance: Math.round(lighthouse.categories.performance?.score * 100),
                  accessibility: Math.round(lighthouse.categories.accessibility?.score * 100),
                  'best-practices': Math.round(lighthouse.categories['best-practices']?.score * 100),
                  seo: Math.round(lighthouse.categories.seo?.score * 100)
                };
                
                totalScore += Object.values(report.performance).reduce((a, b) => a + b, 0);
                scoringCategories += Object.values(report.performance).length;
              }
            } catch (error) {
              report.performance.error = error.message;
            }

            // セキュリティ結果
            try {
              if (fs.existsSync('./security-audit-results/security-analysis.json')) {
                const security = JSON.parse(fs.readFileSync('./security-audit-results/security-analysis.json', 'utf8'));
                report.security = security.summary;
                
                // セキュリティスコア（脆弱性がない = 100点）
                const securityScore = security.summary.critical === 0 && security.summary.high === 0 ? 100 : 
                                    security.summary.critical === 0 ? 75 : 
                                    security.summary.critical <= 2 ? 50 : 25;
                                    
                totalScore += securityScore;
                scoringCategories += 1;
                
                if (security.summary.critical > 0) {
                  report.summary.issues.push(`🚨 ${security.summary.critical} critical security vulnerabilities`);
                }
                if (security.summary.high > 0) {
                  report.summary.issues.push(`⚠️ ${security.summary.high} high security vulnerabilities`);
                }
              }
            } catch (error) {
              report.security.error = error.message;
            }

            // アクセシビリティ結果
            try {
              if (fs.existsSync('./accessibility-audit-results/accessibility-analysis.json')) {
                const accessibility = JSON.parse(fs.readFileSync('./accessibility-audit-results/accessibility-analysis.json', 'utf8'));
                report.accessibility = {
                  violations: accessibility.summary.violations,
                  passes: accessibility.summary.passes,
                  issues: accessibility.summary.issues.length
                };
                
                // アクセシビリティスコア
                const accessibilityScore = accessibility.summary.violations === 0 ? 100 : 
                                         accessibility.summary.violations <= 2 ? 80 : 
                                         accessibility.summary.violations <= 5 ? 60 : 40;
                                         
                totalScore += accessibilityScore;
                scoringCategories += 1;
                
                if (accessibility.summary.violations > 0) {
                  report.summary.issues.push(`♿ ${accessibility.summary.violations} accessibility violations`);
                }
              }
            } catch (error) {
              report.accessibility.error = error.message;
            }

            // 総合スコア計算
            if (scoringCategories > 0) {
              report.summary.score = Math.round(totalScore / scoringCategories);
            }

            // 推奨事項
            if (report.summary.score < 70) {
              report.summary.recommendations.push('Overall quality needs improvement');
            }
            if (report.performance?.performance < 80) {
              report.summary.recommendations.push('Optimize application performance');
            }
            if (report.security?.critical > 0) {
              report.summary.recommendations.push('Address critical security vulnerabilities immediately');
            }
            if (report.accessibility?.violations > 0) {
              report.summary.recommendations.push('Fix accessibility violations to improve usability');
            }

            fs.writeFileSync('./quality-report.json', JSON.stringify(report, null, 2));
            console.log(JSON.stringify(report, null, 2));
            
            return report;
          }

          generateQualityReport();
          EOF

          GITHUB_SHA="${{ github.sha }}" GITHUB_REF_NAME="${{ github.ref_name }}" node generate_quality_report.js

      - name: Generate quality badge
        run: |
          # 品質レポートからスコアを取得してバッジ生成
          SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./quality-report.json', 'utf8')).summary.score)")
          
          if [ "$SCORE" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$SCORE" -ge 70 ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi
          
          echo "![Quality Score](https://img.shields.io/badge/quality-${SCORE}%25-${COLOR})" > quality-badge.md

      - name: Create quality issue if score is low
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('./quality-report.json', 'utf8'));
              
              if (report.summary.score < 70 || report.summary.issues.length > 0) {
                const issueBody = `## 📊 Quality Audit Report

**Overall Score: ${report.summary.score}/100**

### Issues Found
${report.summary.issues.map(issue => `- ${issue}`).join('\n') || 'No major issues found'}

### Recommendations
${report.summary.recommendations.map(rec => `- ${rec}`).join('\n') || 'No specific recommendations'}

### Detailed Results

#### Performance (Lighthouse)
- Performance: ${report.performance?.performance || 'N/A'}%
- Accessibility: ${report.performance?.accessibility || 'N/A'}%
- Best Practices: ${report.performance?.['best-practices'] || 'N/A'}%
- SEO: ${report.performance?.seo || 'N/A'}%

#### Security
- Critical: ${report.security?.critical || 0}
- High: ${report.security?.high || 0}
- Medium: ${report.security?.medium || 0}
- Low: ${report.security?.low || 0}

#### Accessibility
- Violations: ${report.accessibility?.violations || 0}
- Total Issues: ${report.accessibility?.issues || 0}

---
🤖 Generated by Quality Audit workflow
Commit: ${report.commit}
Branch: ${report.branch}`;

                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `📊 Quality Issues Detected - Score: ${report.summary.score}/100`,
                  body: issueBody,
                  labels: ['quality', 'automated', 'needs-review']
                });
              }
            } catch (error) {
              console.log('Error creating quality issue:', error);
            }

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: |
            quality-report.json
            quality-badge.md