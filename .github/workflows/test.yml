name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  # 並列実行1: ユニットテスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Run unit tests
        run: bun run test -- --coverage --outputFile=unit-test-results.json --json

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            unit-test-results.json
            coverage/

  # 並列実行2: E2Eテスト
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: bun run build

      - name: Run E2E tests
        run: bun run test:e2e -- --reporter=json > e2e-test-results.json

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e-test-results.json
            test-results/
            playwright-report/

  # 並列実行3: コード品質チェック
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Run Biome checks
        run: bun run check

  # テスト結果の統合とレポート生成
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, code-quality]
    if: always()

    outputs:
      test-status: ${{ steps.evaluate.outputs.test-status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Evaluate test status
        id: evaluate
        run: |
          UNIT_STATUS="${{ needs.unit-tests.result }}"
          E2E_STATUS="${{ needs.e2e-tests.result }}"
          QUALITY_STATUS="${{ needs.code-quality.result }}"
          
          echo "Unit Tests: $UNIT_STATUS"
          echo "E2E Tests: $E2E_STATUS"  
          echo "Code Quality: $QUALITY_STATUS"
          
          if [[ "$UNIT_STATUS" == "success" && "$E2E_STATUS" == "success" && "$QUALITY_STATUS" == "success" ]]; then
            echo "test-status=success" >> $GITHUB_OUTPUT
          else
            echo "test-status=failure" >> $GITHUB_OUTPUT
          fi

  # 成功時: PRを作成 (develop ブランチからmainへ)
  create-success-pr:
    name: Create Success PR
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: needs.generate-report.outputs.test-status == 'success' && github.event_name == 'push' && github.ref_name == 'develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR for successful tests
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "✅ All Tests Passed - Ready for Review (develop → main)"
          body: |
            ## 🎉 Test Results Summary
            
            All tests have passed successfully! This PR is automatically created to merge the changes from develop to main.
            
            ### Test Results
            - ✅ Unit Tests: Passed
            - ✅ E2E Tests: Passed  
            - ✅ Code Quality: Passed
            
            ### Details
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}
            - **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Next Steps
            - Review the changes
            - Merge if everything looks good
            
            ---
            🤖 Automatically created by GitHub Actions
          branch: auto-pr-${{ github.ref_name }}-${{ github.run_id }}
          base: main
          labels: |
            automated
            tests-passed
            ready-for-review

  # 失敗時: Issueを作成
  create-failure-issue:
    name: Create Failure Issue
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: needs.generate-report.outputs.test-status == 'failure'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create issue for test failures
        uses: actions/github-script@v7
        with:
          script: |
            const unitStatus = '${{ needs.unit-tests.result }}';
            const e2eStatus = '${{ needs.e2e-tests.result }}';
            const qualityStatus = '${{ needs.code-quality.result }}';

            const failedTests = [];
            if (unitStatus !== 'success') failedTests.push('Unit Tests');
            if (e2eStatus !== 'success') failedTests.push('E2E Tests');
            if (qualityStatus !== 'success') failedTests.push('Code Quality');

            const issueBody = '## Test Failure Report\\n\\n' +
              '### Summary\\n' +
              'The following tests have failed in the latest run:\\n\\n' +
              failedTests.map(test => `- ❌ ${test}`).join('\\n') + '\\n\\n' +
              '### Test Status\\n' +
              `- Unit Tests: ${unitStatus === 'success' ? '✅' : '❌'} ${unitStatus}\\n` +
              `- E2E Tests: ${e2eStatus === 'success' ? '✅' : '❌'} ${e2eStatus}\\n` +
              `- Code Quality: ${qualityStatus === 'success' ? '✅' : '❌'} ${qualityStatus}\\n\\n` +
              '### Context\\n' +
              '- **Commit**: ${{ github.sha }}\\n' +
              '- **Branch**: ${{ github.ref_name }}\\n' +
              '- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n' +
              '- **Triggered by**: ${{ github.event_name }}\\n\\n' +
              '### Action Items\\n' +
              '- [ ] Review failed tests\\n' +
              '- [ ] Fix failing tests\\n' +
              '- [ ] Re-run tests to verify fixes\\n' +
              '- [ ] Close this issue when resolved\\n\\n' +
              '---\\n' +
              'Automatically created by GitHub Actions';

            // 既存の未解決issue検索
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'test-failure,automated'
            });

            if (existingIssues.data.length > 0) {
              // 既存issueにコメント追加
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: '## New Test Failure\\n\\n' + issueBody
              });
            } else {
              // 新しいissue作成
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Test Failures - ' + new Date().toISOString().split('T')[0],
                body: issueBody,
                labels: ['test-failure', 'automated', 'bug', 'priority-high']
              });
            }